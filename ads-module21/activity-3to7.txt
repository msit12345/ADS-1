1.Answer the following questions on Separate Chaining Hash table for the keys and its hash values.
Keys : S E A R C H E X A M P L E
Hash : 2 0 0 4 4 4 0 2 0 4 3 3 0
Note: If there are no keys write null, If there are multiple keys write keys with comma space separated
    For the index 0, Write the keys in ascending order.
Ans.AAEEE
    For the index 4, Write the keys in ascending order.
Ans.CHMR
    For the index 1, Write the keys in ascending order.
Ans.NULL
    For the index 2, Write the keys in ascending order.
Ans.SX
    For the index 3, Write the keys in ascending order.
Ans.LP
2.Fill in the blanks-2
After Inserting elements 1, 32, 22, 15, 33, 45, 66, 73, 10. 
How many collisions occur when you hashCode() as key % size after inserting keys into hashtable for given sizes below.
        Size = 7 
Ans.5
        Size = 8
Ans.3
        Size = 12
Ans.2
        Size = 1
Ans.0
3.Fill in the blanks-3
In a separate-chaining hash table with M lists and N keys, the number of compares (equality tests) for search and insert is proportional to N/M. (true/false)
Ans.false
Any good hash function should have the three properties :  (true/false)
It should be deterministic, equal keys must produce the same hash value.
It should be efficient to compute.
It should uniformly distribute the keys.
Ans.true
How many empty lists do you expect to see when you insert keys 1, 2, 3, 4, 5, 6 into a hash table with 
Separate Chaining Hashing with hashCode as key % size , for size = 2 without any resizing?
Ans.0
How many empty lists do you expect to see when you insert keys 2, 22, 32, 42, 52 into a hash table with 
Separate Chaining Hashing with hashCode as key % size , for size = 10 without any resizing?
Ans.9
How many empty lists do you expect to see when you insert keys 15, 30, 45, 60, 75 into a hash table with 
Separate Chaining Hashing with hashCode as key % size , for size = 15 without any resizing?
Ans.14
4.Is the following implementation of hashCode() legal?
public int hasCode(){
return 17;
}
If legal, Analyse the performance.
Ans.
This method returns the hash code value for the object on which this method is invoked. 
This method returns the hash code value as an integer and is supported for the benefit 
of hashing based collection classes such as Hashtable, HashMap, HashSet etc. 
This method must be overridden in every class that overrides the equals method.
5.Insert the keys E A S Y Q U T I O N in that order into an initially empty table of M = 5 lists, using separate chaining. 
Use the hash function 11 k % M to transform the kth letter of the alphabet into a table index.
Ans.
FOR INDEX-0=E Y T O
FOR INDEX-1=A U
FOR INDEX-2=Q
FOR INDEX-3=NULL
FOR INDEX-4=S I N
